// Generated by CoffeeScript 1.6.1
var Bitrater, LastFM, Router, router,
  _this = this;

LastFM = (function() {

  function LastFM() {}

  LastFM.prototype.constuctor = function() {};

  return LastFM;

})();

/* --------------------------------------------
     Begin bitrater.coffee
--------------------------------------------
*/


Bitrater = (function() {

  function Bitrater() {
    var _this = this;
    this.getBitrate = function(event) {
      return Bitrater.prototype.getBitrate.apply(_this, arguments);
    };
    this._requestContentLength = function(event) {
      return Bitrater.prototype._requestContentLength.apply(_this, arguments);
    };
  }

  Bitrater.prototype._requestContentLength = function(event) {
    var audioUrl, xhr,
      _this = this;
    audioUrl = event.message.url;
    xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4 && xhr.status === 200) {
        return _this._calculateBitrate(event, xhr.getResponseHeader("Content-Length"));
      }
    };
    xhr.open("HEAD", audioUrl, true);
    return xhr.send(null);
  };

  Bitrater.prototype._calculateBitrate = function(event, size) {
    var audio, bitrate;
    audio = event.message;
    bitrate = ((size * 8) / audio.duration / 1000).toFixed();
    return event.target.page.dispatchMessage("setBitrate", {
      bitrate: bitrate,
      id: audio.id
    });
  };

  Bitrater.prototype.getBitrate = function(event) {
    return this._requestContentLength(event);
  };

  return Bitrater;

})();

/* --------------------------------------------
     Begin global.coffee
--------------------------------------------
*/


Router = (function() {

  function Router(bitrater, lastFM) {
    var _this = this;
    this.bitrater = bitrater;
    this.lastFM = lastFM;
    this.routeMessage = function(event) {
      return Router.prototype.routeMessage.apply(_this, arguments);
    };
  }

  Router.prototype.routeMessage = function(event) {
    var cmd;
    cmd = event.name;
    switch (cmd) {
      case "getSettings":
        return this._getSettings(event);
      case "getBitrate":
        return this._getBitrate(event);
      case "getLastFMToken":
        return this._getLastFMToken(event);
      case "setLasfFMPlayingNow":
        return this._setLasfFMPlayingNow(event);
      case "scrobble":
        return this._scrobble(event);
      default:
        return this._log(event);
    }
  };

  Router.prototype._getSettings = function(event) {};

  Router.prototype._getBitrate = function(event) {
    return this.bitrater.getBitrate(event);
  };

  Router.prototype._getLastFMToken = function(event) {};

  Router.prototype._setLasfFMPlayingNow = function(event) {};

  Router.prototype._scrobble = function(event) {};

  Router.prototype._log = function(event) {
    return console.log(event);
  };

  return Router;

})();

router = new Router(new Bitrater(), new LastFM());

safari.application.addEventListener("message", router.routeMessage, false);
