// Generated by CoffeeScript 1.4.0
(function() {
  var VKAudio, VKAudioCollection, addClass, altKeyPressed, audios, insertAfter, removeClass, route, setBitrate;

  if (window.top === window) {
    VKAudioCollection = (function() {

      function VKAudioCollection() {
        this.audios = new Array;
        this.ids = new Array;
        console.log("VKAudiocollection created");
      }

      VKAudioCollection.prototype.collectNodes = function() {
        return document.getElementsByClassName("play_new");
      };

      VKAudioCollection.prototype.parseNodes = function() {
        var node, vkAudio, _i, _len, _ref, _results;
        this.nodes = this.collectNodes();
        _ref = this.nodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          if (this.ids.indexOf(node.id) === -1) {
            vkAudio = new VKAudio(node);
            this.ids.push(node.id);
            _results.push(this.audios.push(vkAudio));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      VKAudioCollection.prototype.showBitrates = function() {
        var audio, _i, _len, _ref, _results;
        _ref = this.audios;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          audio = _ref[_i];
          _results.push(audio.showBitrate());
        }
        return _results;
      };

      VKAudioCollection.prototype.hideBitrates = function() {
        var audio, _i, _len, _ref, _results;
        _ref = this.audios;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          audio = _ref[_i];
          _results.push(audio.hideBitrate());
        }
        return _results;
      };

      return VKAudioCollection;

    })();
    VKAudio = (function() {

      function VKAudio(node) {
        this.node = node;
        console.log("VKAudio builded");
        this.id = this.node.id;
        this.getBitrate();
      }

      VKAudio.prototype.getBitrate = function() {
        var audioData, audioDuration, audioUrl, inputNode, inputNodeId;
        inputNodeId = this.id.replace("play", "audio_info");
        inputNode = document.getElementById(inputNodeId);
        audioData = inputNode.value.match(/(https?:\/\/.+\.(?:vkontakte\.ru|vk\.com|userapi\.com)\/.*.mp3),([0-9]+)/i);
        audioUrl = audioData[1];
        audioDuration = audioData[2];
        return safari.self.tab.dispatchMessage("getBitrate", {
          url: audioUrl,
          duration: audioDuration,
          id: this.id
        });
      };

      VKAudio.prototype.setBitrate = function(bitrate) {
        this.bitrate = bitrate;
      };

      VKAudio.prototype.createLink = function() {
        return true;
      };

      VKAudio.prototype.createBitrateNode = function() {
        this.divNode = document.createElement("div");
        addClass(this.divNode, "vkaudioBitrate");
        this.divNode.innerHTML = this.bitrate;
        return insertAfter(this.node, this.divNode);
      };

      VKAudio.prototype.showBitrate = function() {
        var interval,
          _this = this;
        return interval = setInterval(function() {
          var colorClass, _ref, _ref1, _ref2;
          if (_this.bitrate) {
            colorClass = "";
            if (_this.bitrate > 315) {
              colorClass = "green";
            } else if ((250 < (_ref = _this.bitrate) && _ref <= 315)) {
              colorClass = "blue";
            } else if ((120 < (_ref1 = _this.bitrate) && _ref1 <= 250)) {
              colorClass = "orange";
            } else if ((60 < (_ref2 = _this.bitrate) && _ref2 <= 120)) {
              colorClass = "red";
            } else {
              colorClass = "brown";
            }
            if (!_this.divNode) {
              _this.createBitrateNode();
            }
            removeClass(_this.divNode, "vkaudioHidden");
            addClass(_this.divNode, "vkaudioShown");
            addClass(_this.divNode, colorClass);
            return clearInterval(interval);
          }
        }, 100);
      };

      VKAudio.prototype.hideBitrate = function() {
        var interval,
          _this = this;
        return interval = setInterval(function() {
          if (_this.bitrate) {
            removeClass(_this.divNode, "vkaudioShown");
            addClass(_this.divNode, "vkaudioHidden");
            return clearInterval(interval);
          }
        }, 100);
      };

      VKAudio.prototype.setLink = function() {};

      return VKAudio;

    })();
    route = function(event) {
      var cmd;
      cmd = event.name;
      switch (cmd) {
        case "setBitrate":
          return setBitrate(event.message);
      }
    };
    setBitrate = function(audio) {
      var audioIndex;
      audioIndex = audios.ids.indexOf(audio.id);
      return audios.audios[audioIndex].setBitrate(audio.bitrate);
    };
    insertAfter = function(targetNode, newNode) {
      return targetNode.parentNode.insertBefore(newNode, targetNode.nextSibling);
    };
    addClass = function(node, newClassName) {
      return node.className += " " + newClassName;
    };
    removeClass = function(node, oldClassName) {
      return node.className = node.className.replace(oldClassName, "");
    };
    safari.self.addEventListener("message", route, false);
    audios = new VKAudioCollection;
    altKeyPressed = false;
    document.addEventListener("keydown", function(event) {
      if (event.altKey) {
        altKeyPressed = true;
        audios.parseNodes();
        return audios.showBitrates();
      }
    }, false);
    document.addEventListener("keyup", function(event) {
      if (altKeyPressed) {
        audios.hideBitrates();
        return altKeyPressed = false;
      }
    }, false);
  }

}).call(this);
